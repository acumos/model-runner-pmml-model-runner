#ACUMOS
#================================================================================
#Copyright @ 2018 AT&T Intellectual Property. All rights reserved.
#================================================================================
#This Acumos software file is distributed by AT&T under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#This file is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.


syntax = "proto3";
import "google/api/annotations.proto";

package DataPipelineService;

enum IdentifierType{
  READ_DATASOURCE=0;
  PUBLISHER_PROCESSOR=1;
  SUBSCRIBER_PROCESSOR=2;
  TRANSFORMER_PROCESSOR=3;
  PIPELINEPOOL=4;
  TOPIC=5;
  PROCESSOR=6;
  PIPELINE=7;
  DATA=8;
  WRITE_DATASOURCE=9;
  SINK_PROCESSOR=10;
}

enum ProcessorType{
  PUBLISH_PROCESSOR=0;
  SUBSCRIBE_PROCESSOR=1;
  TRANSFORM_PROCESSOR=2;
  SINKER_PROCESSOR=3;
}

enum SERVICE_STATUS {
        ACTIVE=0; // READY FOR USE
        INACTIVE=1; // Can be Made Active
        FAILED=2; // FAILED TO START SERVICE
        EXCEPTION=3; // GETTING EXCEPTION FROM DEPENDENCIES
        INPROGRESS=4; // IN PROCESS OF STARTING
}
message KVPair  {string key=1;string value=2;}
message KVPairs  {repeated KVPair kv=1;}
message Empty {}
message State  {
    SERVICE_STATUS status=1;
    repeated string  logs=2;
}

enum PERSISTENCE_TYPE {
        READONLY=0; // READY FOR USE
        WRITEONLY=1; // Can be Made Active
        READWRITE=2; // FAILED TO START SERVICE
}
message Identifier {string uuid=1;IdentifierType type=2;string name=3;KVPairs metrics=4;}
message Pools {repeated Identifier pool=1;}
message Pipelines {repeated Identifier pipeline=1;}
message Processors {repeated Identifier processor=1;}
message Topics {repeated Identifier topic=1;}
message DataSources {repeated Identifier datasource=1;}

message Extract {repeated string data=1;}
message DataSource {string datasource_driver=1;PERSISTENCE_TYPE persistence_type=2;repeated KVPair datasource_configuration=3;}
message Job {repeated string payload=1;}
message Objects {repeated Identifier objects=1;}

message TopicPipeline{Identifier idtopic=1;Identifier idpipeline=2;}
message DataSourcePool{Identifier iddatasource=1;Identifier idpool=2;}
message Topic{string name=1;KVPairs kvpairs=2;}
message TopicDataSource{Identifier idtopic=1;Identifier iddatasource=2;}

message ProcessorTopic {Identifier idprocessor=1;Identifier idtopic=2;Identifier iddatasource=3;}

message ProcessorPayload {ProcessorType type=1;string filename=2;repeated string string_encoded_payload=3;}
message IdMetrics{Identifier ident=1; KVPairs metrics=2;}

service DataPipelineService {
//  ------------------- DATA PIPELINE SERVICE ----------------

// CHECK STATUS OF SERVICE HEALTH
  rpc Status(Empty)                                 returns (State)       {option (google.api.http) = {get: "/v1/datapipelineservice/status"};}
//SHUTDOWN SERVICE
  rpc Shutdown(Empty)                               returns (Empty)       {option (google.api.http) = {get: "/v1/datapipelineservice/shutdown"};}
// START SERVICE
  rpc Startup(Empty)                                returns (State)       {option (google.api.http) = {get: "/v1/datapipelineservice/startup"};}

//  ------------------- DATA PIPELINE POOLS ----------------

//Create A datapipeline Pool for a set of pipelines . Pipelines are always associated with a pool. A pool can have 0 or more pipelines
  rpc CreatePool(Identifier)                        returns(Identifier)  {option (google.api.http) = {post: "/v1/datapipeline/pool/create"; body: "*"};}
  rpc StartPool(Identifier)                         returns(State)  {option (google.api.http) = {post: "/v1/datapipeline/{uuid}/pool/start"; body: "*"};}
  rpc StopPool(Identifier)                          returns(State)  {option (google.api.http) = {post: "/v1/datapipeline/{uuid}/pool/stop"; body: "*"};}
  rpc PausePool(Identifier)                         returns(State)  {option (google.api.http) = {post: "/v1/datapipeline/{uuid}/pool/pause"; body: "*"};}
  rpc UnPausePool(Identifier)                       returns(State)  {option (google.api.http) = {post: "/v1/datapipeline/{uuid}/pool/unpause"; body: "*"};}
  rpc ListAllPools(Empty)                           returns(Pools)  {option (google.api.http) = {get: "/v1/datapipeline/pool/list"};}
  rpc ListObjectsInPool(Identifier)                 returns(Objects)  {option (google.api.http) = {get: "/v1/datapipeline/{uuid}/pool/objects/list"};}
//Delete A Data Pipeline pool , To delete a pool, all pipelines in the pool must be deleted
  rpc DeletePool(Identifier)                        returns(State)  {option (google.api.http) = {post: "/v1/datapipeline/{uuid}/pool/delete"; body: "*"};}

//  ------------------- DATA SOURCES ----------------

  rpc RegisterDataSource(DataSource)                returns(Identifier)  {option (google.api.http) = {post: "/v1/datasource/register"; body: "*"};}
  rpc RegisterDataSourceToPool(DataSourcePool)      returns(Identifier)  {option (google.api.http) = {post: "/v1/datasource/pool/register"; body: "*"};}
  rpc SampleDataSource(Identifier)                  returns(Extract)  {option (google.api.http) = {get: "/v1/datasource/{uuid}/sample"};}


//  ------------------- PIPELINE ----------------

  rpc CreatePipeline(Identifier)                        returns(Identifier)  {option (google.api.http) = {post: "/v1/pipeline/create"; body: "*"};}
  rpc DeletePipeline(Identifier)                        returns(State)  {option (google.api.http) = {post: "/v1/pipeline/{uuid}/delete"; body: "*"};}
  rpc RunPipeline(Identifier)                        returns(State)  {option (google.api.http) = {post: "/v1/pipeline/{uuid}/run"; body: "*"};}
  rpc PausePipeline(Identifier)                        returns(State)  {option (google.api.http) = {post: "/v1/pipeline/{uuid}/pause"; body: "*"};}
  rpc UnPausePipeline(Identifier)                        returns(State)  {option (google.api.http) = {post: "/v1/pipeline/{uuid}/unpause"; body: "*"};}
  rpc StopPipeline(Identifier)                        returns(State)  {option (google.api.http) = {post: "/v1/pipeline/{uuid}/stop"; body: "*"};}

//  ------------------- PIPELINESNAPSHOT ----------------

  rpc SnapshotPipeline(Identifier)                        returns(Identifier)  {option (google.api.http) = {post: "/v1/pipeline/{uuid}/snapshot"; body: "*"};}
  rpc RestorePipelineSnapshot(Identifier)                 returns(Identifier)  {option (google.api.http) = {post: "/v1/pipeline/{uuid}/restore"; body: "*"};}


//  ------------------- TOPIC ----------------

  rpc CreateTopic(Topic)                        returns(Identifier)  {option (google.api.http) = {post: "/v1/topic/create"; body: "*"};}
  rpc RegisterTopicForPipeline(TopicPipeline)   returns(Identifier)  {option (google.api.http) = {post: "/v1/topic/datasource/register"; body: "*"};}
  rpc RegisterTopicForDataSource(TopicDataSource)    returns(Identifier)  {option (google.api.http) = {post: "/v1/topic/datasource/register"; body: "*"};}
  rpc SampleTopic(Identifier)                   returns(Extract)  {option (google.api.http) = {get: "/v1/topic/{uuid}/sample"};}

//  ------------------- PROCESSOR ----------------

  rpc CreateProcessor(ProcessorPayload)         returns(Identifier)  {option (google.api.http) = {post: "/v1/processor/create"; body: "*"};}
  rpc ArchiveProcessor(Identifier)              returns(Identifier)  {option (google.api.http) = {post: "/v1/processor/{uuid}/archive"; body: "*"};}
  rpc RunProcessor(Identifier)                  returns(Identifier)  {option (google.api.http) = {post: "/v1/processor/{uuid}/run"; body: "*"};}
  rpc StopProcessor(Identifier)                 returns(Identifier)  {option (google.api.http) = {post: "/v1/processor/{uuid}/stop"; body: "*"};}
  rpc PauseProcessor(Identifier)                returns(Identifier)  {option (google.api.http) = {post: "/v1/processor/{uuid}/pause"; body: "*"};}
  rpc ReStartProcessor(Identifier)              returns(Identifier)  {option (google.api.http) = {post: "/v1/processor/{uuid}/restart"; body: "*"};}
  rpc Associate_Processor_ToPublisherTopic(ProcessorTopic)              returns(Identifier)  {option (google.api.http) = {post: "/v1/processor/topic"; body: "*"};}
  rpc Associate_Processor_ToSubscriberTopic(ProcessorTopic)              returns(Identifier)  {option (google.api.http) = {post: "/v1/processor/topic"; body: "*"};}
  rpc Associate_Processor_ToSinkTopic(ProcessorTopic)              returns(Identifier)  {option (google.api.http) = {post: "/v1/processor/topic"; body: "*"};}

//  rpc SampleDataSource(Identifier)                  returns(Extract)  {option (google.api.http) = {get: "/v1/datasource/register"};}

//  -------------- Metrics ---------------
  rpc UpdateMetrics(IdMetrics)         returns(Identifier)  {option (google.api.http) = {post: "/v1/Identifier/metrics"; body: "*"};}
  rpc RetrieveMetrics(IdMetrics)         returns(Identifier)  {option (google.api.http) = {get: "/v1/Identifier/metrics"};}
}
