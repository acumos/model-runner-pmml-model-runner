---
swagger: "2.0"
info:
  version: "version not set"
  title: "DataPipeline.proto"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /v1/datapipeline/pool/create:
    post:
      tags:
      - "DataPipelineService"
      summary: "Create A datapipeline Pool for a set of pipelines . Pipelines are\
        \ always associated with a pool. A pool can have 0 or more pipelines"
      operationId: "create_pool"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DataPipelineServiceIdentifier"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceIdentifier"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/datapipeline/pool/list:
    get:
      tags:
      - "DataPipelineService"
      operationId: "list_all_pools"
      parameters: []
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServicePools"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/datapipeline/{uuid}/pool/delete:
    post:
      tags:
      - "DataPipelineService"
      summary: "Delete A Data Pipeline pool , To delete a pool, all pipelines in the\
        \ pool must be deleted"
      operationId: "delete_pool"
      parameters:
      - name: "uuid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DataPipelineServiceIdentifier"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceState"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/datapipeline/{uuid}/pool/objects/list:
    get:
      tags:
      - "DataPipelineService"
      operationId: "list_objects_in_pool"
      parameters:
      - name: "uuid"
        in: "path"
        required: true
        type: "string"
      - name: "type"
        in: "query"
        required: false
        type: "string"
        default: "READ_DATASOURCE"
        enum:
        - "READ_DATASOURCE"
        - "PUBLISHER_JOB"
        - "SUBSCRIBER_JOB"
        - "TRANSFORMER_JOB"
        - "PIPELINEPOOL"
        - "TOPIC"
        - "PROCESSOR"
        - "PIPELINE"
        - "DATA"
        - "WRITE_DATASOURCE"
        - "SINK_JOB"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceObjects"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/datapipeline/{uuid}/pool/pause:
    post:
      tags:
      - "DataPipelineService"
      operationId: "pause_pool"
      parameters:
      - name: "uuid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DataPipelineServiceIdentifier"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceState"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/datapipeline/{uuid}/pool/start:
    post:
      tags:
      - "DataPipelineService"
      operationId: "start_pool"
      parameters:
      - name: "uuid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DataPipelineServiceIdentifier"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceState"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/datapipeline/{uuid}/pool/stop:
    post:
      tags:
      - "DataPipelineService"
      operationId: "stop_pool"
      parameters:
      - name: "uuid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DataPipelineServiceIdentifier"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceState"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/datapipeline/{uuid}/pool/unpause:
    post:
      tags:
      - "DataPipelineService"
      operationId: "un_pause_pool"
      parameters:
      - name: "uuid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DataPipelineServiceIdentifier"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceState"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/datapipelineservice/shutdown:
    get:
      tags:
      - "DataPipelineService"
      summary: "SHUTDOWN SERVICE"
      operationId: "shutdown"
      parameters: []
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceEmpty"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/datapipelineservice/startup:
    get:
      tags:
      - "DataPipelineService"
      summary: "START SERVICE"
      operationId: "startup"
      parameters: []
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceState"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/datapipelineservice/status:
    get:
      tags:
      - "DataPipelineService"
      summary: "CHECK STATUS OF SERVICE HEALTH"
      operationId: "status"
      parameters: []
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceState"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/datasource/register:
    post:
      tags:
      - "DataPipelineService"
      operationId: "register_data_source"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DataPipelineServiceDataSource"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceIdentifier"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/datasource/{datasource.uuid}/pool/register:
    post:
      tags:
      - "DataPipelineService"
      operationId: "register_data_source_to_pool"
      parameters:
      - name: "datasource_uuid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DataPipelineServiceDataSourcePool"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceIdentifier"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/datasource/{uuid}/sample:
    get:
      tags:
      - "DataPipelineService"
      operationId: "sample_data_source"
      parameters:
      - name: "uuid"
        in: "path"
        required: true
        type: "string"
      - name: "type"
        in: "query"
        required: false
        type: "string"
        default: "READ_DATASOURCE"
        enum:
        - "READ_DATASOURCE"
        - "PUBLISHER_JOB"
        - "SUBSCRIBER_JOB"
        - "TRANSFORMER_JOB"
        - "PIPELINEPOOL"
        - "TOPIC"
        - "PROCESSOR"
        - "PIPELINE"
        - "DATA"
        - "WRITE_DATASOURCE"
        - "SINK_JOB"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceExtract"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/pipeline/create:
    post:
      tags:
      - "DataPipelineService"
      operationId: "create_pipeline"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DataPipelineServiceIdentifier"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceIdentifier"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/pipeline/pause:
    post:
      tags:
      - "DataPipelineService"
      operationId: "pause_pipeline"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DataPipelineServiceIdentifier"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceState"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/pipeline/run:
    post:
      tags:
      - "DataPipelineService"
      operationId: "run_pipeline"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DataPipelineServiceIdentifier"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceState"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/pipeline/unpause:
    post:
      tags:
      - "DataPipelineService"
      operationId: "stop_pipeline"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DataPipelineServiceIdentifier"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceState"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
  /v1/pipeline/{uuid}/delete:
    post:
      tags:
      - "DataPipelineService"
      operationId: "delete_pipeline"
      parameters:
      - name: "uuid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DataPipelineServiceIdentifier"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/DataPipelineServiceState"
      x-swagger-router-controller: "swagger_server.controllers.data_pipeline_service_controller"
definitions:
  DataPipelineServiceDataSource:
    type: "object"
    properties:
      datasource_driver:
        type: "string"
      datasource_type:
        $ref: "#/definitions/DataPipelineServiceIdentifierType"
      datasource_configuration:
        type: "array"
        items:
          $ref: "#/definitions/DataPipelineServiceKVPair"
    example:
      datasource_type: {}
      datasource_configuration:
      - value: "value"
        key: "key"
      - value: "value"
        key: "key"
      datasource_driver: "datasource_driver"
  DataPipelineServiceDataSourcePool:
    type: "object"
    properties:
      datasource:
        $ref: "#/definitions/DataPipelineServiceIdentifier"
      pool:
        $ref: "#/definitions/DataPipelineServiceIdentifier"
    example:
      datasource:
        name: "name"
        metrics:
          kv:
          - value: "value"
            key: "key"
          - value: "value"
            key: "key"
        type: {}
        uuid: "uuid"
      pool:
        name: "name"
        metrics:
          kv:
          - value: "value"
            key: "key"
          - value: "value"
            key: "key"
        type: {}
        uuid: "uuid"
  DataPipelineServiceEmpty:
    type: "object"
  DataPipelineServiceExtract:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "string"
    example:
      data:
      - "data"
      - "data"
  DataPipelineServiceIdentifier:
    type: "object"
    properties:
      uuid:
        type: "string"
      type:
        $ref: "#/definitions/DataPipelineServiceIdentifierType"
      name:
        type: "string"
      metrics:
        $ref: "#/definitions/DataPipelineServiceKVPairs"
    example:
      name: "name"
      metrics:
        kv:
        - value: "value"
          key: "key"
        - value: "value"
          key: "key"
      type: {}
      uuid: "uuid"
  DataPipelineServiceIdentifierType:
    type: "string"
    enum:
    - "READ_DATASOURCE"
    - "PUBLISHER_JOB"
    - "SUBSCRIBER_JOB"
    - "TRANSFORMER_JOB"
    - "PIPELINEPOOL"
    - "TOPIC"
    - "PROCESSOR"
    - "PIPELINE"
    - "DATA"
    - "WRITE_DATASOURCE"
    - "SINK_JOB"
    default: "READ_DATASOURCE"
  DataPipelineServiceKVPair:
    type: "object"
    properties:
      key:
        type: "string"
      value:
        type: "string"
    example:
      value: "value"
      key: "key"
  DataPipelineServiceKVPairs:
    type: "object"
    properties:
      kv:
        type: "array"
        items:
          $ref: "#/definitions/DataPipelineServiceKVPair"
    example:
      kv:
      - value: "value"
        key: "key"
      - value: "value"
        key: "key"
  DataPipelineServiceObjects:
    type: "object"
    properties:
      objects:
        type: "array"
        items:
          $ref: "#/definitions/DataPipelineServiceIdentifier"
    example:
      objects:
      - name: "name"
        metrics:
          kv:
          - value: "value"
            key: "key"
          - value: "value"
            key: "key"
        type: {}
        uuid: "uuid"
      - name: "name"
        metrics:
          kv:
          - value: "value"
            key: "key"
          - value: "value"
            key: "key"
        type: {}
        uuid: "uuid"
  DataPipelineServicePools:
    type: "object"
    properties:
      pool:
        type: "array"
        items:
          $ref: "#/definitions/DataPipelineServiceIdentifier"
    example:
      pool:
      - name: "name"
        metrics:
          kv:
          - value: "value"
            key: "key"
          - value: "value"
            key: "key"
        type: {}
        uuid: "uuid"
      - name: "name"
        metrics:
          kv:
          - value: "value"
            key: "key"
          - value: "value"
            key: "key"
        type: {}
        uuid: "uuid"
  DataPipelineServiceSERVICE_STATUS:
    type: "string"
    enum:
    - "ACTIVE"
    - "INACTIVE"
    - "FAILED"
    - "EXCEPTION"
    - "INPROGRESS"
    default: "ACTIVE"
  DataPipelineServiceState:
    type: "object"
    properties:
      status:
        $ref: "#/definitions/DataPipelineServiceSERVICE_STATUS"
      logs:
        type: "array"
        items:
          type: "string"
    example:
      logs:
      - "logs"
      - "logs"
      status: {}
