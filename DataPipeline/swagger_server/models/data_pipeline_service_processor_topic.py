# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.data_pipeline_service_identifier import DataPipelineServiceIdentifier  # noqa: F401,E501
from swagger_server import util


class DataPipelineServiceProcessorTopic(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, processor: DataPipelineServiceIdentifier=None, topic: DataPipelineServiceIdentifier=None, datasource: DataPipelineServiceIdentifier=None):  # noqa: E501
        """DataPipelineServiceProcessorTopic - a model defined in Swagger

        :param processor: The processor of this DataPipelineServiceProcessorTopic.  # noqa: E501
        :type processor: DataPipelineServiceIdentifier
        :param topic: The topic of this DataPipelineServiceProcessorTopic.  # noqa: E501
        :type topic: DataPipelineServiceIdentifier
        :param datasource: The datasource of this DataPipelineServiceProcessorTopic.  # noqa: E501
        :type datasource: DataPipelineServiceIdentifier
        """
        self.swagger_types = {
            'processor': DataPipelineServiceIdentifier,
            'topic': DataPipelineServiceIdentifier,
            'datasource': DataPipelineServiceIdentifier
        }

        self.attribute_map = {
            'processor': 'processor',
            'topic': 'topic',
            'datasource': 'datasource'
        }

        self._processor = processor
        self._topic = topic
        self._datasource = datasource

    @classmethod
    def from_dict(cls, dikt) -> 'DataPipelineServiceProcessorTopic':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataPipelineServiceProcessorTopic of this DataPipelineServiceProcessorTopic.  # noqa: E501
        :rtype: DataPipelineServiceProcessorTopic
        """
        return util.deserialize_model(dikt, cls)

    @property
    def processor(self) -> DataPipelineServiceIdentifier:
        """Gets the processor of this DataPipelineServiceProcessorTopic.


        :return: The processor of this DataPipelineServiceProcessorTopic.
        :rtype: DataPipelineServiceIdentifier
        """
        return self._processor

    @processor.setter
    def processor(self, processor: DataPipelineServiceIdentifier):
        """Sets the processor of this DataPipelineServiceProcessorTopic.


        :param processor: The processor of this DataPipelineServiceProcessorTopic.
        :type processor: DataPipelineServiceIdentifier
        """

        self._processor = processor

    @property
    def topic(self) -> DataPipelineServiceIdentifier:
        """Gets the topic of this DataPipelineServiceProcessorTopic.


        :return: The topic of this DataPipelineServiceProcessorTopic.
        :rtype: DataPipelineServiceIdentifier
        """
        return self._topic

    @topic.setter
    def topic(self, topic: DataPipelineServiceIdentifier):
        """Sets the topic of this DataPipelineServiceProcessorTopic.


        :param topic: The topic of this DataPipelineServiceProcessorTopic.
        :type topic: DataPipelineServiceIdentifier
        """

        self._topic = topic

    @property
    def datasource(self) -> DataPipelineServiceIdentifier:
        """Gets the datasource of this DataPipelineServiceProcessorTopic.


        :return: The datasource of this DataPipelineServiceProcessorTopic.
        :rtype: DataPipelineServiceIdentifier
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource: DataPipelineServiceIdentifier):
        """Sets the datasource of this DataPipelineServiceProcessorTopic.


        :param datasource: The datasource of this DataPipelineServiceProcessorTopic.
        :type datasource: DataPipelineServiceIdentifier
        """

        self._datasource = datasource
