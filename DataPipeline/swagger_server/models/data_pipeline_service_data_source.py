#ACUMOS
#================================================================================
#Copyright Â© 2018 AT&T Intellectual Property. All rights reserved.
#================================================================================
#This Acumos software file is distributed by AT&Tunder the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#This file is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and 
#limitations under the License.

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.data_pipeline_service_kv_pair import DataPipelineServiceKVPair  # noqa: F401,E501
from swagger_server.models.data_pipeline_service_persistencetype import DataPipelineServicePERSISTENCETYPE  # noqa: F401,E501
from swagger_server import util


class DataPipelineServiceDataSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, datasource_driver: str=None, persistence_type: DataPipelineServicePERSISTENCETYPE=None, datasource_configuration: List[DataPipelineServiceKVPair]=None):  # noqa: E501
        """DataPipelineServiceDataSource - a model defined in Swagger

        :param datasource_driver: The datasource_driver of this DataPipelineServiceDataSource.  # noqa: E501
        :type datasource_driver: str
        :param persistence_type: The persistence_type of this DataPipelineServiceDataSource.  # noqa: E501
        :type persistence_type: DataPipelineServicePERSISTENCETYPE
        :param datasource_configuration: The datasource_configuration of this DataPipelineServiceDataSource.  # noqa: E501
        :type datasource_configuration: List[DataPipelineServiceKVPair]
        """
        self.swagger_types = {
            'datasource_driver': str,
            'persistence_type': DataPipelineServicePERSISTENCETYPE,
            'datasource_configuration': List[DataPipelineServiceKVPair]
        }

        self.attribute_map = {
            'datasource_driver': 'datasource_driver',
            'persistence_type': 'persistence_type',
            'datasource_configuration': 'datasource_configuration'
        }

        self._datasource_driver = datasource_driver
        self._persistence_type = persistence_type
        self._datasource_configuration = datasource_configuration

    @classmethod
    def from_dict(cls, dikt) -> 'DataPipelineServiceDataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataPipelineServiceDataSource of this DataPipelineServiceDataSource.  # noqa: E501
        :rtype: DataPipelineServiceDataSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datasource_driver(self) -> str:
        """Gets the datasource_driver of this DataPipelineServiceDataSource.


        :return: The datasource_driver of this DataPipelineServiceDataSource.
        :rtype: str
        """
        return self._datasource_driver

    @datasource_driver.setter
    def datasource_driver(self, datasource_driver: str):
        """Sets the datasource_driver of this DataPipelineServiceDataSource.


        :param datasource_driver: The datasource_driver of this DataPipelineServiceDataSource.
        :type datasource_driver: str
        """

        self._datasource_driver = datasource_driver

    @property
    def persistence_type(self) -> DataPipelineServicePERSISTENCETYPE:
        """Gets the persistence_type of this DataPipelineServiceDataSource.


        :return: The persistence_type of this DataPipelineServiceDataSource.
        :rtype: DataPipelineServicePERSISTENCETYPE
        """
        return self._persistence_type

    @persistence_type.setter
    def persistence_type(self, persistence_type: DataPipelineServicePERSISTENCETYPE):
        """Sets the persistence_type of this DataPipelineServiceDataSource.


        :param persistence_type: The persistence_type of this DataPipelineServiceDataSource.
        :type persistence_type: DataPipelineServicePERSISTENCETYPE
        """

        self._persistence_type = persistence_type

    @property
    def datasource_configuration(self) -> List[DataPipelineServiceKVPair]:
        """Gets the datasource_configuration of this DataPipelineServiceDataSource.


        :return: The datasource_configuration of this DataPipelineServiceDataSource.
        :rtype: List[DataPipelineServiceKVPair]
        """
        return self._datasource_configuration

    @datasource_configuration.setter
    def datasource_configuration(self, datasource_configuration: List[DataPipelineServiceKVPair]):
        """Sets the datasource_configuration of this DataPipelineServiceDataSource.


        :param datasource_configuration: The datasource_configuration of this DataPipelineServiceDataSource.
        :type datasource_configuration: List[DataPipelineServiceKVPair]
        """

        self._datasource_configuration = datasource_configuration
