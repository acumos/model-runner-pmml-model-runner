# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.data_pipeline_service_identifier_type import DataPipelineServiceIdentifierType  # noqa: F401,E501
from swagger_server.models.data_pipeline_service_kv_pair import DataPipelineServiceKVPair  # noqa: F401,E501
from swagger_server import util


class DataPipelineServiceDataSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, datasource_driver: str=None, datasource_type: DataPipelineServiceIdentifierType=None, datasource_configuration: List[DataPipelineServiceKVPair]=None):  # noqa: E501
        """DataPipelineServiceDataSource - a model defined in Swagger

        :param datasource_driver: The datasource_driver of this DataPipelineServiceDataSource.  # noqa: E501
        :type datasource_driver: str
        :param datasource_type: The datasource_type of this DataPipelineServiceDataSource.  # noqa: E501
        :type datasource_type: DataPipelineServiceIdentifierType
        :param datasource_configuration: The datasource_configuration of this DataPipelineServiceDataSource.  # noqa: E501
        :type datasource_configuration: List[DataPipelineServiceKVPair]
        """
        self.swagger_types = {
            'datasource_driver': str,
            'datasource_type': DataPipelineServiceIdentifierType,
            'datasource_configuration': List[DataPipelineServiceKVPair]
        }

        self.attribute_map = {
            'datasource_driver': 'datasource_driver',
            'datasource_type': 'datasource_type',
            'datasource_configuration': 'datasource_configuration'
        }

        self._datasource_driver = datasource_driver
        self._datasource_type = datasource_type
        self._datasource_configuration = datasource_configuration

    @classmethod
    def from_dict(cls, dikt) -> 'DataPipelineServiceDataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataPipelineServiceDataSource of this DataPipelineServiceDataSource.  # noqa: E501
        :rtype: DataPipelineServiceDataSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datasource_driver(self) -> str:
        """Gets the datasource_driver of this DataPipelineServiceDataSource.


        :return: The datasource_driver of this DataPipelineServiceDataSource.
        :rtype: str
        """
        return self._datasource_driver

    @datasource_driver.setter
    def datasource_driver(self, datasource_driver: str):
        """Sets the datasource_driver of this DataPipelineServiceDataSource.


        :param datasource_driver: The datasource_driver of this DataPipelineServiceDataSource.
        :type datasource_driver: str
        """

        self._datasource_driver = datasource_driver

    @property
    def datasource_type(self) -> DataPipelineServiceIdentifierType:
        """Gets the datasource_type of this DataPipelineServiceDataSource.


        :return: The datasource_type of this DataPipelineServiceDataSource.
        :rtype: DataPipelineServiceIdentifierType
        """
        return self._datasource_type

    @datasource_type.setter
    def datasource_type(self, datasource_type: DataPipelineServiceIdentifierType):
        """Sets the datasource_type of this DataPipelineServiceDataSource.


        :param datasource_type: The datasource_type of this DataPipelineServiceDataSource.
        :type datasource_type: DataPipelineServiceIdentifierType
        """

        self._datasource_type = datasource_type

    @property
    def datasource_configuration(self) -> List[DataPipelineServiceKVPair]:
        """Gets the datasource_configuration of this DataPipelineServiceDataSource.


        :return: The datasource_configuration of this DataPipelineServiceDataSource.
        :rtype: List[DataPipelineServiceKVPair]
        """
        return self._datasource_configuration

    @datasource_configuration.setter
    def datasource_configuration(self, datasource_configuration: List[DataPipelineServiceKVPair]):
        """Sets the datasource_configuration of this DataPipelineServiceDataSource.


        :param datasource_configuration: The datasource_configuration of this DataPipelineServiceDataSource.
        :type datasource_configuration: List[DataPipelineServiceKVPair]
        """

        self._datasource_configuration = datasource_configuration
