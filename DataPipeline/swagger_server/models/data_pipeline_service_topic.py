#ACUMOS
#================================================================================
#Copyright @ 2018 AT&T Intellectual Property. All rights reserved.
#================================================================================
#This Acumos software file is distributed by AT&T under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#This file is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and 
#limitations under the License.

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.data_pipeline_service_kv_pairs import DataPipelineServiceKVPairs  # noqa: F401,E501
from swagger_server import util


class DataPipelineServiceTopic(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, kvpairs: DataPipelineServiceKVPairs=None):  # noqa: E501
        """DataPipelineServiceTopic - a model defined in Swagger

        :param name: The name of this DataPipelineServiceTopic.  # noqa: E501
        :type name: str
        :param kvpairs: The kvpairs of this DataPipelineServiceTopic.  # noqa: E501
        :type kvpairs: DataPipelineServiceKVPairs
        """
        self.swagger_types = {
            'name': str,
            'kvpairs': DataPipelineServiceKVPairs
        }

        self.attribute_map = {
            'name': 'name',
            'kvpairs': 'kvpairs'
        }

        self._name = name
        self._kvpairs = kvpairs

    @classmethod
    def from_dict(cls, dikt) -> 'DataPipelineServiceTopic':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataPipelineServiceTopic of this DataPipelineServiceTopic.  # noqa: E501
        :rtype: DataPipelineServiceTopic
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this DataPipelineServiceTopic.


        :return: The name of this DataPipelineServiceTopic.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DataPipelineServiceTopic.


        :param name: The name of this DataPipelineServiceTopic.
        :type name: str
        """

        self._name = name

    @property
    def kvpairs(self) -> DataPipelineServiceKVPairs:
        """Gets the kvpairs of this DataPipelineServiceTopic.


        :return: The kvpairs of this DataPipelineServiceTopic.
        :rtype: DataPipelineServiceKVPairs
        """
        return self._kvpairs

    @kvpairs.setter
    def kvpairs(self, kvpairs: DataPipelineServiceKVPairs):
        """Sets the kvpairs of this DataPipelineServiceTopic.


        :param kvpairs: The kvpairs of this DataPipelineServiceTopic.
        :type kvpairs: DataPipelineServiceKVPairs
        """

        self._kvpairs = kvpairs
