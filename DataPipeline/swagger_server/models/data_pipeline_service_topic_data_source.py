#ACUMOS
#================================================================================
#Copyright Â© 2018 AT&T Intellectual Property. All rights reserved.
#================================================================================
#This Acumos software file is distributed by AT&Tunder the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#This file is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and 
#limitations under the License.

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.data_pipeline_service_identifier import DataPipelineServiceIdentifier  # noqa: F401,E501
from swagger_server import util


class DataPipelineServiceTopicDataSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, idtopic: DataPipelineServiceIdentifier=None, iddatasource: DataPipelineServiceIdentifier=None):  # noqa: E501
        """DataPipelineServiceTopicDataSource - a model defined in Swagger

        :param idtopic: The idtopic of this DataPipelineServiceTopicDataSource.  # noqa: E501
        :type idtopic: DataPipelineServiceIdentifier
        :param iddatasource: The iddatasource of this DataPipelineServiceTopicDataSource.  # noqa: E501
        :type iddatasource: DataPipelineServiceIdentifier
        """
        self.swagger_types = {
            'idtopic': DataPipelineServiceIdentifier,
            'iddatasource': DataPipelineServiceIdentifier
        }

        self.attribute_map = {
            'idtopic': 'idtopic',
            'iddatasource': 'iddatasource'
        }

        self._idtopic = idtopic
        self._iddatasource = iddatasource

    @classmethod
    def from_dict(cls, dikt) -> 'DataPipelineServiceTopicDataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataPipelineServiceTopicDataSource of this DataPipelineServiceTopicDataSource.  # noqa: E501
        :rtype: DataPipelineServiceTopicDataSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def idtopic(self) -> DataPipelineServiceIdentifier:
        """Gets the idtopic of this DataPipelineServiceTopicDataSource.


        :return: The idtopic of this DataPipelineServiceTopicDataSource.
        :rtype: DataPipelineServiceIdentifier
        """
        return self._idtopic

    @idtopic.setter
    def idtopic(self, idtopic: DataPipelineServiceIdentifier):
        """Sets the idtopic of this DataPipelineServiceTopicDataSource.


        :param idtopic: The idtopic of this DataPipelineServiceTopicDataSource.
        :type idtopic: DataPipelineServiceIdentifier
        """

        self._idtopic = idtopic

    @property
    def iddatasource(self) -> DataPipelineServiceIdentifier:
        """Gets the iddatasource of this DataPipelineServiceTopicDataSource.


        :return: The iddatasource of this DataPipelineServiceTopicDataSource.
        :rtype: DataPipelineServiceIdentifier
        """
        return self._iddatasource

    @iddatasource.setter
    def iddatasource(self, iddatasource: DataPipelineServiceIdentifier):
        """Sets the iddatasource of this DataPipelineServiceTopicDataSource.


        :param iddatasource: The iddatasource of this DataPipelineServiceTopicDataSource.
        :type iddatasource: DataPipelineServiceIdentifier
        """

        self._iddatasource = iddatasource
