# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.data_pipeline_service_identifier import DataPipelineServiceIdentifier  # noqa: F401,E501
from swagger_server import util


class DataPipelineServiceTopicDataSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, topic: DataPipelineServiceIdentifier=None, datasource: DataPipelineServiceIdentifier=None):  # noqa: E501
        """DataPipelineServiceTopicDataSource - a model defined in Swagger

        :param topic: The topic of this DataPipelineServiceTopicDataSource.  # noqa: E501
        :type topic: DataPipelineServiceIdentifier
        :param datasource: The datasource of this DataPipelineServiceTopicDataSource.  # noqa: E501
        :type datasource: DataPipelineServiceIdentifier
        """
        self.swagger_types = {
            'topic': DataPipelineServiceIdentifier,
            'datasource': DataPipelineServiceIdentifier
        }

        self.attribute_map = {
            'topic': 'topic',
            'datasource': 'datasource'
        }

        self._topic = topic
        self._datasource = datasource

    @classmethod
    def from_dict(cls, dikt) -> 'DataPipelineServiceTopicDataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataPipelineServiceTopicDataSource of this DataPipelineServiceTopicDataSource.  # noqa: E501
        :rtype: DataPipelineServiceTopicDataSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic(self) -> DataPipelineServiceIdentifier:
        """Gets the topic of this DataPipelineServiceTopicDataSource.


        :return: The topic of this DataPipelineServiceTopicDataSource.
        :rtype: DataPipelineServiceIdentifier
        """
        return self._topic

    @topic.setter
    def topic(self, topic: DataPipelineServiceIdentifier):
        """Sets the topic of this DataPipelineServiceTopicDataSource.


        :param topic: The topic of this DataPipelineServiceTopicDataSource.
        :type topic: DataPipelineServiceIdentifier
        """

        self._topic = topic

    @property
    def datasource(self) -> DataPipelineServiceIdentifier:
        """Gets the datasource of this DataPipelineServiceTopicDataSource.


        :return: The datasource of this DataPipelineServiceTopicDataSource.
        :rtype: DataPipelineServiceIdentifier
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource: DataPipelineServiceIdentifier):
        """Sets the datasource of this DataPipelineServiceTopicDataSource.


        :param datasource: The datasource of this DataPipelineServiceTopicDataSource.
        :type datasource: DataPipelineServiceIdentifier
        """

        self._datasource = datasource
