# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.data_pipeline_service_identifier import DataPipelineServiceIdentifier  # noqa: F401,E501
from swagger_server import util


class DataPipelineServiceDataSourcePool(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, datasource: DataPipelineServiceIdentifier=None, pool: DataPipelineServiceIdentifier=None):  # noqa: E501
        """DataPipelineServiceDataSourcePool - a model defined in Swagger

        :param datasource: The datasource of this DataPipelineServiceDataSourcePool.  # noqa: E501
        :type datasource: DataPipelineServiceIdentifier
        :param pool: The pool of this DataPipelineServiceDataSourcePool.  # noqa: E501
        :type pool: DataPipelineServiceIdentifier
        """
        self.swagger_types = {
            'datasource': DataPipelineServiceIdentifier,
            'pool': DataPipelineServiceIdentifier
        }

        self.attribute_map = {
            'datasource': 'datasource',
            'pool': 'pool'
        }

        self._datasource = datasource
        self._pool = pool

    @classmethod
    def from_dict(cls, dikt) -> 'DataPipelineServiceDataSourcePool':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataPipelineServiceDataSourcePool of this DataPipelineServiceDataSourcePool.  # noqa: E501
        :rtype: DataPipelineServiceDataSourcePool
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datasource(self) -> DataPipelineServiceIdentifier:
        """Gets the datasource of this DataPipelineServiceDataSourcePool.


        :return: The datasource of this DataPipelineServiceDataSourcePool.
        :rtype: DataPipelineServiceIdentifier
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource: DataPipelineServiceIdentifier):
        """Sets the datasource of this DataPipelineServiceDataSourcePool.


        :param datasource: The datasource of this DataPipelineServiceDataSourcePool.
        :type datasource: DataPipelineServiceIdentifier
        """

        self._datasource = datasource

    @property
    def pool(self) -> DataPipelineServiceIdentifier:
        """Gets the pool of this DataPipelineServiceDataSourcePool.


        :return: The pool of this DataPipelineServiceDataSourcePool.
        :rtype: DataPipelineServiceIdentifier
        """
        return self._pool

    @pool.setter
    def pool(self, pool: DataPipelineServiceIdentifier):
        """Sets the pool of this DataPipelineServiceDataSourcePool.


        :param pool: The pool of this DataPipelineServiceDataSourcePool.
        :type pool: DataPipelineServiceIdentifier
        """

        self._pool = pool
