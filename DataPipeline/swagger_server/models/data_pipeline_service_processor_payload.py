#ACUMOS
#================================================================================
#Copyright @ 2018 AT&T Intellectual Property. All rights reserved.
#================================================================================
#This Acumos software file is distributed by AT&T under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#This file is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and 
#limitations under the License.

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.data_pipeline_service_processor_type import DataPipelineServiceProcessorType  # noqa: F401,E501
from swagger_server import util


class DataPipelineServiceProcessorPayload(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: DataPipelineServiceProcessorType=None, filename: str=None, string_encoded_payload: List[str]=None):  # noqa: E501
        """DataPipelineServiceProcessorPayload - a model defined in Swagger

        :param type: The type of this DataPipelineServiceProcessorPayload.  # noqa: E501
        :type type: DataPipelineServiceProcessorType
        :param filename: The filename of this DataPipelineServiceProcessorPayload.  # noqa: E501
        :type filename: str
        :param string_encoded_payload: The string_encoded_payload of this DataPipelineServiceProcessorPayload.  # noqa: E501
        :type string_encoded_payload: List[str]
        """
        self.swagger_types = {
            'type': DataPipelineServiceProcessorType,
            'filename': str,
            'string_encoded_payload': List[str]
        }

        self.attribute_map = {
            'type': 'type',
            'filename': 'filename',
            'string_encoded_payload': 'string_encoded_payload'
        }

        self._type = type
        self._filename = filename
        self._string_encoded_payload = string_encoded_payload

    @classmethod
    def from_dict(cls, dikt) -> 'DataPipelineServiceProcessorPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataPipelineServiceProcessorPayload of this DataPipelineServiceProcessorPayload.  # noqa: E501
        :rtype: DataPipelineServiceProcessorPayload
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> DataPipelineServiceProcessorType:
        """Gets the type of this DataPipelineServiceProcessorPayload.


        :return: The type of this DataPipelineServiceProcessorPayload.
        :rtype: DataPipelineServiceProcessorType
        """
        return self._type

    @type.setter
    def type(self, type: DataPipelineServiceProcessorType):
        """Sets the type of this DataPipelineServiceProcessorPayload.


        :param type: The type of this DataPipelineServiceProcessorPayload.
        :type type: DataPipelineServiceProcessorType
        """

        self._type = type

    @property
    def filename(self) -> str:
        """Gets the filename of this DataPipelineServiceProcessorPayload.


        :return: The filename of this DataPipelineServiceProcessorPayload.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename: str):
        """Sets the filename of this DataPipelineServiceProcessorPayload.


        :param filename: The filename of this DataPipelineServiceProcessorPayload.
        :type filename: str
        """

        self._filename = filename

    @property
    def string_encoded_payload(self) -> List[str]:
        """Gets the string_encoded_payload of this DataPipelineServiceProcessorPayload.


        :return: The string_encoded_payload of this DataPipelineServiceProcessorPayload.
        :rtype: List[str]
        """
        return self._string_encoded_payload

    @string_encoded_payload.setter
    def string_encoded_payload(self, string_encoded_payload: List[str]):
        """Sets the string_encoded_payload of this DataPipelineServiceProcessorPayload.


        :param string_encoded_payload: The string_encoded_payload of this DataPipelineServiceProcessorPayload.
        :type string_encoded_payload: List[str]
        """

        self._string_encoded_payload = string_encoded_payload
